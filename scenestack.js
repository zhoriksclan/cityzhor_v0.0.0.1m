var gdjs;(function(o){const r=new o.Logger("Scene stack"),c=new o.Logger("Multiplayer - Debug");class u{constructor(e){this._stack=[];this._wasFirstSceneLoaded=!1;this._isNextLayoutLoading=!1;this._sceneStackSyncDataToApply=null;this._wasDisposed=!1;if(!e)throw"SceneStack must be constructed with a gdjs.RuntimeGame.";this._runtimeGame=e}onGameResolutionResized(){for(let e=0;e<this._stack.length;++e)this._stack[e].onGameResolutionResized()}step(e){if(this._throwIfDisposed(),this._isNextLayoutLoading||this._stack.length===0)return!1;if(this.applyUpdateFromNetworkSyncDataIfAny())return c.info("Scene stack has been updated from network sync data, skipping step."),!0;const t=this._stack[this._stack.length-1];if(t.renderAndStep(e)){const n=t.getRequestedChange();if(n===o.SceneChangeRequest.STOP_GAME)return this._runtimeGame.getRenderer().stopGame(),!0;n===o.SceneChangeRequest.POP_SCENE?this.pop():n===o.SceneChangeRequest.PUSH_SCENE?this.push(t.getRequestedScene()):n===o.SceneChangeRequest.REPLACE_SCENE||n===o.SceneChangeRequest.CLEAR_SCENES?this.replace(t.getRequestedScene(),n===o.SceneChangeRequest.CLEAR_SCENES):r.error("Unrecognized change in scene stack: "+n)}return!0}renderWithoutStep(){return this._throwIfDisposed(),this._stack.length===0?!1:(this._stack[this._stack.length-1].render(),!0)}pop(e=1){this._throwIfDisposed();let s=!1;for(let t=0;t<e&&!(this._stack.length<=1);++t){s=!0;const n=this._stack.pop();if(!n)return;this._unloadSceneAndPossiblyResources({scene:n,newSceneName:null})}if(s){const t=this._stack[this._stack.length-1];t&&t.onResume()}}push(e,s){this._throwIfDisposed();const t=this._stack[this._stack.length-1];return t&&t.onPause(),this._runtimeGame.areSceneAssetsReady(e)?this._loadNewScene(e,s):(this._isNextLayoutLoading=!0,this._runtimeGame.loadSceneAssets(e).then(()=>{this._loadNewScene(e),this._isNextLayoutLoading=!1}),null)}_loadNewScene(e,s){this._throwIfDisposed();const t=new o.RuntimeScene(this._runtimeGame);if(t.loadFromScene(this._runtimeGame.getSceneAndExtensionsData(e)),this._wasFirstSceneLoaded=!0,s){const n=this._runtimeGame.getExternalLayoutData(s);n&&t.createObjectsFrom(n.instances,0,0,0,!0)}return this._stack.push(t),t}replace(e,s){if(this._throwIfDisposed(),s)for(;this._stack.length!==0;){let t=this._stack.pop();t&&this._unloadSceneAndPossiblyResources({scene:t,newSceneName:e})}else if(this._stack.length!==0){let t=this._stack.pop();t&&this._unloadSceneAndPossiblyResources({scene:t,newSceneName:e})}return this.push(e)}getCurrentScene(){return this._throwIfDisposed(),this._stack.length===0?null:this._stack[this._stack.length-1]}wasFirstSceneLoaded(){return this._wasFirstSceneLoaded}getAllSceneNames(){return this._throwIfDisposed(),this._stack.map(e=>e.getName())}getNetworkSyncData(e){const s=e.playerNumber,t=e.isHost;if(s!==void 0&&!t)return null;const n=[];for(let a=0;a<this._stack.length;++a){const i=this._stack[a];n.push({name:i.getName(),networkId:i.getOrCreateNetworkId()})}return n}updateFromNetworkSyncData(e){this._sceneStackSyncDataToApply=e}applyUpdateFromNetworkSyncDataIfAny(){this._throwIfDisposed();const e=this._sceneStackSyncDataToApply;let s=!1;if(!e)return s;this._sceneStackSyncDataToApply=null;for(let t=0;t<e.length;++t){const n=e[t],a=this._stack[t];if(!a){c.info(`Scene at position ${t} with name ${n.name} is missing from the stack, adding it.`);const i=this.push(n.name);i&&(i.networkId=n.networkId),s=!0;continue}if(a.getName()!==n.name){c.info(`Scene at position ${t} and name ${a.getName()} is not the same as the expected ${n.name}, replacing.`);const i=this.replace(n.name,!0);i&&(i.networkId=n.networkId),s=!0;continue}if(!a.networkId&&n.networkId&&n.name===a.getName()){c.info(`Scene at position ${t} and name ${a.getName()} has no networkId, let's assume it's the right one and reconcile it with the id ${n.networkId}.`),a.networkId=n.networkId;continue}if(a.networkId!==n.networkId){c.info(`Scene at position ${t} and name ${a.getName()} has a different networkId ${a.networkId} than the expected ${n.networkId}, replacing.`);const i=this.replace(n.name,!1);i&&(i.networkId=n.networkId),s=!0;continue}}if(this._stack.length>e.length){const t=this._stack.length-e.length;this.pop(t),s=!0}return s}dispose(){for(;this._stack.length>0;){const e=this._stack.pop();e&&this._unloadSceneAndPossiblyResources({scene:e,newSceneName:null})}this._wasDisposed=!0}_unloadSceneAndPossiblyResources({scene:e,newSceneName:s}){const t=e.getName(),n=e.getResourcesUnloading(),i=(n==="inherit"?this._runtimeGame.getSceneResourcesUnloading():n)==="at-scene-exit"&&s!==e.getName()&&this._stack.every(h=>h.getName()!==t);e.unloadScene(),i&&this._runtimeGame.getResourceLoader().unloadSceneResources({unloadedSceneName:t,newSceneName:s})}_throwIfDisposed(){if(this._wasDisposed)throw"The scene stack has been disposed and should not be used anymore."}}o.SceneStack=u})(gdjs||(gdjs={}));
//# sourceMappingURL=scenestack.js.map
